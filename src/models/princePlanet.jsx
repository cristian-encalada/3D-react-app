/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: 小王子 (https://sketchfab.com/hong2695429209)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/le-petit-prince-a373654d89894bb49e8df5b2ab6d4b7f
Title: 小王子  Le Petit Prince
*/
import { a } from "@react-spring/three";
import React, { useEffect, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import princePlanetScene from "../assets/3d/prince_planet.glb";

export function PrincePlanet({
  isRotating,
  setIsRotating,
  setCurrentStage,
  ...props
}) {
  const planetRef = useRef();
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(princePlanetScene);
  // Use a ref for the last mouse x position
  const lastX = useRef(0);
  // Use a ref for rotation speed
  const rotationSpeed = useRef(0);
  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the planet's rotation based on the mouse/touch movement
      planetRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      planetRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      planetRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      planetRef.current.rotation.x += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on planet's orientation
      const rotation = planetRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the planet's orientation
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });


  return (
    <a.group ref={planetRef} {...props}>
      <a.group position={[-35, -45, 5]} rotation={[-Math.PI / 2, 0, 0]} scale={0.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2.geometry}
          material={materials.Material__21}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_1.geometry}
          material={materials.Translucent_Glass_Gray}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_2.geometry}
          material={materials["0007_MistyRose"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_3.geometry}
          material={materials.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_4.geometry}
          material={materials["13_obj"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_5.geometry}
          material={materials["Dosch-Space_0019-thumb.jpg"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_6.geometry}
          material={materials["PM3D_Cube3D2.005"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_7.geometry}
          material={materials.PolySphere2}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_8.geometry}
          material={materials["02_copy4_1.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_9.geometry}
          material={materials["02_10.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_10.geometry}
          material={materials["PM3D_Sphere3D1.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_11.geometry}
          material={materials["PM3D_Sphere3D1.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_12.geometry}
          material={materials.PolySphere2_9}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_13.geometry}
          material={materials["PM3D_Cylinder3D1.002"]}
        />
        <lineSegments
          geometry={nodes.Material3.geometry}
          material={materials.edge_color000255}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_14.geometry}
          material={materials["02_copy4.003"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_15.geometry}
          material={materials["02_07.002"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_16.geometry}
          material={materials["12_02"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_17.geometry}
          material={materials["02_copy4_2"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_18.geometry}
          material={materials["12_01"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material3_1.geometry}
          material={materials["02_copy4_2_0"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Material2_19.geometry}
          material={materials.Material__20}
        />
      </a.group>
    </a.group>
  );
}

export default PrincePlanet;